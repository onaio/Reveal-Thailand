# Friendly name to refer to this node from command line
engine.name=warehouse-000

# The class name for the JDBC Driver
db.driver=org.postgresql.Driver

# The JDBC URL used to connect to the database
db.url=jdbc:postgresql://postgres.reveal-th.smartregister.org/{{ database_name }}

# The database user that SymmetricDS should use.
db.user={{ database_username }}

# The database password
db.password={{ database_password }}

# This node will contact the root node's sync.url to register itself.
# Leave blank to indicate this is the root node.
registration.url=

# Sync URL where other nodes can contact this node to push/pull data or register.
sync.url=http://localhost:31415/sync/warehouse-000

# Node group this node belongs to, which defines what it will sync with who.
# Must match the sym_node_group configuration in database.
group.id=warehouse

# External ID for this node, which is any unique identifier you want to use.
external.id=000

# If this is true, when symmetric starts up it will try to create the necessary tables.
auto.config.database=true

# Whether the pull job is enabled for this node.
start.pull.job=false

# Whether the push job is enabled for this node.
start.push.job=true

# Automatically register new nodes when they request it.
auto.registration=true

# If this is true, a reload is automatically sent to nodes when they register 
# auto.reload=true

# How often to run purge job,
job.purge.period.time.ms=7200000

# How to run routing (in millis), which puts changes into batches.
job.routing.period.time.ms=5000

# How often to run push (in millis), which sends changes to other nodes.
job.push.period.time.ms=10000

# How often to run pull (in millis), which receives changes from other nodes.
job.pull.period.time.ms=10000

# When this node sends an initial load of data to another node, first send table create scripts.
initial.load.create.first=true